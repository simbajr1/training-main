package main

import "fmt"

func solveSudoku(board [][]byte) bool {
	var solve func() bool
	solve = func() bool {
		for r := 0; r < 9; r++ {
			for c := 0; c < 9; c++ {
				if board[r][c] == '.' {
					for num := byte('1'); num <= '9'; num++ {
						if isValid(board, r, c, num) {
							board[r][c] = num
							if solve() {
								return true
							}
							board[r][c] = '.'
						}
					}
					return false
				}
			}
		}
		return true
	}
	return solve()
}

func isValid(board [][]byte, r, c int, num byte) bool {
	boxIndex := (r/3)*3 + c/3
	for i := 0; i < 9; i++ {
		if board[r][i] == num || board[i][c] == num || board[(r/3)*3+i/3][(c/3)*3+i%3] == num {
			return false
		}
	}
	return true
}

func main() {
	board := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}

	if solveSudoku(board) {
		for _, row := range board {
			fmt.Println(string(row))
		}
	} else {
		fmt.Println("No solution exists.")
	}
}
